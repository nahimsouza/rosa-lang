(* Rosa programming language interpreter - Grammar*)

(* ============================ User declarations ============================  *)


(* RosaType represent the types used in ROSA lang *)
datatype RosaType =
  Integer of int
  | Real of real
  | Boolean of bool
  | String of string
  | RSequence of string
  | DSequence of string
  | PSequence of string
  | Quality of string
  | Fasta of string * string
  | Fastq of string * string * string


(* lookupTable is a HashTable used to store identifiers and their values *)
val lookupTable : (string, RosaType) HashTable.hash_table =
    HashTable.mkTable (HashString.hashString, op=) (42, Fail "not found")

(* get the value of the identifier *)
fun lookup id : (RosaType) = HashTable.lookup lookupTable id

(* save the value of the identifier and returns the value of 'exp' *)
fun save id exp =
  let
    val _ = HashTable.insert lookupTable (id, exp)
  in
    exp
  end

(* Basic expession evaluation functions *)

fun plus exp1 exp2 =
  case (exp1, exp2) of (Integer exp1, Integer exp2) => Integer ((Int.toInt exp1) + (Int.toInt exp2))
                    | (Real exp1, Real exp2) => Real ((Real.toLarge exp1) + (Real.toLarge exp2))
                    | (Integer exp1, Real exp2) => Real ((Real.fromInt exp1) + (Real.toLarge exp2))
                    | (Real exp1, Integer exp2) => Real ((Real.toLarge exp1) + (Real.fromInt exp2))

fun times exp1 exp2 =
  case (exp1, exp2) of (Integer exp1, Integer exp2) => Integer ((Int.toInt exp1) * (Int.toInt exp2))
                    | (Real exp1, Real exp2) => Real ((Real.toLarge exp1) * (Real.toLarge exp2))
                    | (Integer exp1, Real exp2) => Real ((Real.fromInt exp1) * (Real.toLarge exp2))
                    | (Real exp1, Integer exp2) => Real ((Real.toLarge exp1) * (Real.fromInt exp2))

fun sub exp1 exp2 =
  case (exp1, exp2) of (Integer exp1, Integer exp2) => Integer ((Int.toInt exp1) - (Int.toInt exp2))
                    | (Real exp1, Real exp2) => Real ((Real.toLarge exp1) - (Real.toLarge exp2))
                    | (Integer exp1, Real exp2) => Real ((Real.fromInt exp1) - (Real.toLarge exp2))
                    | (Real exp1, Integer exp2) => Real ((Real.toLarge exp1) - (Real.fromInt exp2))

fun divide exp1 exp2 =
  case (exp1, exp2) of (Integer exp1, Integer exp2) => Integer ((Int.toInt exp1) div (Int.toInt exp2))
                    | (Real exp1, Real exp2) => Real ((Real.toLarge exp1) / (Real.toLarge exp2))
                    | (Integer exp1, Real exp2) => Real ((Real.fromInt exp1) / (Real.toLarge exp2))
                    | (Real exp1, Integer exp2) => Real ((Real.toLarge exp1) / (Real.fromInt exp2))

fun valueToString exp =
  case exp of Integer x => Int.toString x
            | Real x => Real.toString x

%%

(* ============================ ML-Yacc declarations ============================  *)

%eop EOF SEMI

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int

%left SUB PLUS
%left TIMES DIV
%right CARAT

(* Symbols definition - terminal and non-terminals *)
%term ID of string | INT of int | REAL of real | PLUS | TIMES | PRINT |
      SEMI | EOF | CARAT | DIV | SUB | EQUAL | BOOLEAN of bool |
      INS | DEL | POINT | TRANSCRIBE | TRANSLATE | COMPLEMENT | MOTIF |
      QCTRL | TRIM | TOFASTA | READ | READFA | READFQ | WRITE |
      WRITEFA | WRITEFQ | INPUT | TYPE of string | NOT | AND | OR | DOUBLEEQUAL |
      LPAREN | RPAREN | STRING of string |
      RSEQUENCE of string | DSEQUENCE of string | PSEQUENCE of string |
      QUALITY of string | FASTA of string * string
%nonterm EXP of RosaType | START of string option

(* Language name used by ML-Lex to generate SML code *)
%name Rosa

%subst PRINT for ID
%prefer PLUS TIMES DIV SUB
%keyword PRINT SEMI

%noshift EOF
%value ID ("bogus")
%verbose

%%

(* ============================ ML-Yacc Rules ============================  *)

(* the parser returns the value associated with the expression *)

  START : PRINT EXP (print (valueToString EXP);
                     print "\n";
                     SOME (valueToString EXP))
        | EXP (SOME (valueToString EXP))
        | (NONE)
  EXP : INT             (Integer INT)
      | REAL            (Real REAL)
      | BOOLEAN         (Boolean BOOLEAN)
      | STRING          (String STRING)
      | RSEQUENCE       (RSequence RSEQUENCE)
      | DSEQUENCE       (DSequence DSEQUENCE)
      | PSEQUENCE       (PSequence PSEQUENCE)
      | QUALITY         (Quality QUALITY)
      | FASTA           (Fasta FASTA)
      | ID              (lookup ID)
      | TYPE ID EQUAL EXP    (save ID EXP)
      | EXP PLUS EXP    (plus EXP1 EXP2)
      | EXP TIMES EXP   (times EXP1 EXP2)
      | EXP DIV EXP     (divide EXP1 EXP2)
      | EXP SUB EXP     (sub EXP1 EXP2)
      (* | EXP CARAT EXP   (let fun e (m,0) = 1
                                | e (m,l) = m*e(m,l-1)
                         in e (EXP1,EXP2)
                         end) *)
